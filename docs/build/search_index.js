var documenterSearchIndex = {"docs":
[{"location":"#RandomForests.jl:-a-Julia-package-for-Random-Forests-on-Graphs,-and-Applications-1","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"","category":"section"},{"location":"#What's-a-random-forest?-1","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"What's a random forest?","text":"","category":"section"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"The random forests produced by this package come from graph theory, and are unrelated to the random forests found in machine learning. A tree is a graph without cycles, and a forest is a set of trees.  We are interested in a specific way of generating random spanning forests in a graph, because of its deep ties to the graph Laplacian. ","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"using LightGraphs,TikzPictures,TikzGraphs\ng = grid([2,2])\nadd_vertex!(g)\nadd_edge!(g,4,5)\nt = TikzGraphs.plot(g)\nsave(SVG(\"ex_graph.svg\"),t)\n\ng2 = SimpleDiGraph(5)\nadd_edge!(g2,2,1)\nadd_edge!(g2,1,4)\nadd_edge!(g2,4,5)\nadd_edge!(g2,3,5)\nt = TikzGraphs.plot(g2)\nsave(SVG(\"ex_tree.svg\"),t)\n\ng3 = SimpleDiGraph(5)\nadd_edge!(g3,2,3)\nadd_edge!(g3,1,4)\nadd_edge!(g3,4,5)\n\nt = TikzGraphs.plot(g3)\nsave(SVG(\"ex_forest.svg\"),t)","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"This is an example of a graph (with a loop):","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"(Image: )","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"This is an example of a spanning tree for the (same) graph:","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"(Image: )","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"Finally, this is an example of a spanning forest:","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"(Image: )","category":"page"},{"location":"#Rooted-spanning-forests-1","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"Rooted spanning forests","text":"","category":"section"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"Importantly, all the forests we use are considered to be rooted: each tree in the forest is directed, and all edges point towards the root of the tree. In the forest above, the roots are the nodes 5 and 3. ","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"When we talk about a \"random spanning forest\", we mean a forest phi sampled from the following distribution: ","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"p(phi) = frac1z q^R(phi) prod_(ij)in phi w_ij","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"where:","category":"page"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"$ \\phi $ is a forest, viewed as a set of edges,\n$ R(\\phi) $ is the number of trees in phi,\n$ w_{ij} $ is the weight associated with edge (ij) (which equals 1 if the graph is unweighted)\n$ q $ is a parameter that determines the average number of trees. \n$ z $ is an integration constant. ","category":"page"},{"location":"#References-1","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"References","text":"","category":"section"},{"location":"#Functions-and-types-1","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"Functions and types","text":"","category":"section"},{"location":"#","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","text":"Modules = [RandomForests]\nOrder   = [:function, :type]","category":"page"},{"location":"#RandomForests.next-Tuple{RandomForest}","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.next","text":"next(rf::RandomForest)\n\nReturn a vector of indices v, where v[i] = j means that node i points to node j in the forest. If v[i] = 0 i is a root. \n\n\n\n\n\n","category":"method"},{"location":"#RandomForests.random_forest-Tuple{LightGraphs.AbstractGraph,AbstractFloat}","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.random_forest","text":"random_forest(G::AbstractGraph,q)\n\nRun Wilson's algorithm on G to generate a random forest with parameter \"q\". q determines the probability that the random walk is interrupted at a node. If q is a scalar, that probability equals q/(q+d[i]) at node i with degree d[i]. If q is a vector, it equals q[i]/(q[i]+d[i]).\n\nExample\n\nusing LightGraphs G = grid([3,3]) random_forest(G,.4) q_varying = rand(nv(G)) rf = random_forest(G,q_varying) nroots(rf) next(rf) #who points to whom in the forest`\n\n\n\n\n\n","category":"method"},{"location":"#RandomForests.smooth-Union{Tuple{T}, Tuple{LightGraphs.AbstractGraph{T},Array{T,1} where T,Any}} where T","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"RandomForests.smooth","text":"smooth(g :: AbstractGraph{T},q,Y )\n\nSmooth signal over graph. Given a vector mathbfy of size nv(g), compute q(qmathbfI+mathbfL)^-1mathbfy, where mathbfL is the graph Laplacian and q > 0 is a regularisation coefficient (the smaller q, the stronger the smoothing).\n\nIf Y is a matrix then this function computes q(qmathbfI+mathbfL)^-1mathbfY. The linear system is solved using a direct method.\n\nExample\n\ng = grid([10])\nt = LinRange(0,1,10)\ny = sin.(6*pi*t)\nsmooth(g,.1,y)\nsmooth(g,10.1,y)\n\n\n\n\n\n","category":"method"},{"location":"#LightGraphs.SimpleGraphs.SimpleDiGraph-Tuple{RandomForest}","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"LightGraphs.SimpleGraphs.SimpleDiGraph","text":"SimpleDiGraph(rf :: RandomForest)\n\nConvert a RandomForest rf to a SimpleDiGraph. \n\nExample\n\ng = grid([3,3])\nrf = random_forest(g,.4)\nf = SimpleDiGraph(rf)\nconnected_components(f)\n\n\n\n\n\n","category":"method"},{"location":"#Base.:*-Tuple{Partition,Array{T,2} where T}","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"Base.:*","text":"*(p::Partition,Y :: Matrix)\n\nTreating the graph partition as a linear operator, compute the average of Y over the partition. \n\nExample\n\ng = grid([5])\nrf = random_forest(g,.5)\np = Partition(rf)\np*collect(1:nv(g))\n\n\n\n\n\n","category":"method"},{"location":"#Base.:*-Tuple{RandomForest,Array{T,2} where T}","page":"RandomForests.jl: a Julia package for Random Forests on Graphs, and Applications","title":"Base.:*","text":"*(rf::RandomForest,Y :: Matrix)\n\nTreating the random forest as a linear operator, propagate the value of y at the root to the rest of the tree.\n\nExample\n\ng = grid([5])\nrf = random_forest(g,.5)\nrf*collect(1:nv(g))\n\n\n\n\n\n","category":"method"}]
}
